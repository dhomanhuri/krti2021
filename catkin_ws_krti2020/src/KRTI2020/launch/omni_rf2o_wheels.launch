<!-- 
  This node presents a fast and precise method to estimate the planar motion of a lidar
  from consecutive range scans. It is very useful for the estimation of the robot odometry from
  2D laser range measurements.
  
  For more info please visit: http://mapir.isa.uma.es/work/rf2o
  
  Requirements:
  - 2D laser scan, publishing sensor_msgs::LaserScan
  - TF transform from the laser to the robot base
  - MRPT (http://www.mrpt.org/)
        - Tested with v1.3 (official ubuntu release)
-->

<launch>



    <node pkg="krsbi2019" type="odometry_odom.py" name="odometry_odom"  >
    </node>


    <node pkg="krsbi2019" type="omni2pcl" name="omni2pcl"  >
    </node>


    <!-- run pointcloud_to_laserscan node  -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="/cloud_pcl"/>
        <remap from="scan" to="/laser_scan"/>
        <rosparam>
            target_frame: laser_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -1.0
            max_height: 10.0

            angle_min: -3.14 # -M_PI
            angle_max: 3.14 # M_PI
            angle_increment: 0.01 #0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.000
            range_max: 400.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node>



 



  <node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" output="screen">
    <param name="laser_scan_topic" value="/laser_scan"/>        # topic where the lidar scans are being published
    <param name="odom_topic" value="/odom_rf2o" />              # topic where tu publish the odometry estimations
    <param name="publish_tf" value="true" />                   # wheter or not to publish the tf::transform (base->odom)
    <param name="base_frame_id" value="/laser_link"/>          # frame_id (tf) of the mobile robot base. A tf transform from the laser_frame to the base_frame is mandatory
    <param name="odom_frame_id" value="odom2" />                # frame_id (tf) to publish the odometry estimations    
    <param name="freq" value="6.0"/>                            # Execution frequency.
    <param name="verbose" value="true" />                       # verbose
  </node>



    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find krsbi2019)/rviz/rf2o.rviz"/>
  
</launch>
